<% 
    var s = structs.pop(); 
    var __fileName__ = s.name+'-struct.h';
%>
/********************************************
               AUTOGENERATED
********************************************/

#ifndef <%s.NAME%>_H
#define <%s.NAME%>_H

<%
    var includeList = "";
    for (var i = 0; i < members.length; ++i) 
    {
        if (!includeList.includes(members[i].includeDirective))
        {
            includeList += members[i].includeDirective + ((i == members.length-1) ? '' : '\n');
        }
    }
    includeList;
%>

namespace <%model%> {

class <%Struct%> {
public:
    <%Struct%>();
public:
<%
    var api = "";
    for (var i = 0; i < members.length; ++i) 
    {
        var name = members[i].name;
        var Name = members[i].Name;
        var type = members[i].type;

        if (members[i].primitive) {
            api += '    void set'+Name+'('+type+' '+name+');\n';
        } else {
            api += '    void set'+Name+'(const '+type+' &'+name+');\n';
        }
        api += '    '+type+' '+name+'() const;\n';
        if (members[i].reference) {
            api += '    '+type+' & '+name+'();\n';
        }
        api += '    bool has'+Name+'() const;';

        if (i < members.length-1) {
            api += '\n\n';
        }
    }
    api;
%>
};

}

#endif // <%STRUCT%>_H